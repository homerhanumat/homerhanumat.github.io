<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on HSW Academic</title>
    <link>/post/</link>
    <description>Recent content in Posts on HSW Academic</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2017 Homer White</copyright>
    <lastBuildDate>Sun, 01 Jan 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="/post/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Guidance on the Madhava Graph Problem</title>
      <link>/post/2017-09-27-madhava-graph-advice/</link>
      <pubDate>Wed, 27 Sep 2017 10:30:00 +0000</pubDate>
      
      <guid>/post/2017-09-27-madhava-graph-advice/</guid>
      <description>&lt;div id=&#34;introduction&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;This post provides a bit of guidance for students in CSC 115 who are working on the &lt;a href=&#34;http://homerhanumat.com/r-notes/exercises-2.html&#34;&gt;Madhava Graph exercise&lt;/a&gt; in Chapter 4 of the course text.&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;As you will recall, the statement of the problem is as follows:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Recall the function &lt;code&gt;madhavaPI()&lt;/code&gt; from &lt;a href=&#34;&#34;&gt;Section 3.4.1&lt;/a&gt;. Use this function to write a function called &lt;code&gt;madhavaGraph()&lt;/code&gt; that will do the following: given a number &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt;, the function uses &lt;strong&gt;ggplot2&lt;/strong&gt; to produce a line graph of the first &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; approximations to &lt;span class=&#34;math inline&#34;&gt;\(\pi\)&lt;/span&gt; using the initial terms of the Madhava series.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;The plot should be a line graph similar to the one produced by the &lt;code&gt;collatz()&lt;/code&gt; functions from this Chapter. The function should take a single argument &lt;code&gt;n&lt;/code&gt;, whose default value is 10.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;It should validate the input: if the number entered is not at least 1, then the function should should explain to the user that the he/she must enter a positive number, and then stop.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div id=&#34;outline&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Outline&lt;/h2&gt;
&lt;p&gt;Based on the specification in the problem, you can set up an initial outline of the desired function, as follows:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;madhavaGraph &amp;lt;- function(n = 10) {
  
  validate the input: if n isn&amp;#39;t at least 1, stop the function
    
  find the sums:
    * the sum of the first term (4)
    * the sum of the first and second terms (4 - 4/3)
    * the sum of the first three terms ( 4 - 4/3 + 4/5)
    * and so on until ...
    * the sum of the first n terms
  make sure these sums are stored in a vector (let&amp;#39;s call it &amp;quot;results&amp;quot;)
  
  make the plot:
    - the vector 1:n (call it &amp;quot;terms&amp;quot;) gives the x-coordinates of the points
    - the results vector gives y-coordinates
  
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see, the body of the function has three primary parts:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;validating the input&lt;/li&gt;
&lt;li&gt;finding the sums and storing them in the &lt;code&gt;results&lt;/code&gt; vector&lt;/li&gt;
&lt;li&gt;making the plot.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I’ll leave Part 1 entirely to you, but say a bit more about parts 2 and 3.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;making-the-graph&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Making the Graph&lt;/h2&gt;
&lt;p&gt;First we’ll think about the graph. Since it is made from functions in the &lt;strong&gt;ggplot2&lt;/strong&gt; package, you will need to make sure that you load the package when you are designing the function.&lt;a href=&#34;#fn1&#34; class=&#34;footnoteRef&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(ggplot2)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now suppose that the value of the parameter &lt;code&gt;n&lt;/code&gt; is 10. Then by the time you get around to making the graph you’ll have the terms:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;terms &amp;lt;- 1:n
terms&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1]  1  2  3  4  5  6  7  8  9 10&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You’ll also have the sums, another vector of length 10:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;results&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] 4.000000 2.666667 3.466667 2.895238 3.339683 2.976046 3.283738
##  [8] 3.017072 3.252366 3.041840&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;From our study of the Collatz function, we know that the way to make a line graph of these points is:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plotTitle &amp;lt;- paste0(&amp;quot;The first &amp;quot;, n, &amp;quot; Madhava sums&amp;quot;)
  p &amp;lt;- ggplot(mapping = aes(x = terms, y = results)) +
    geom_point() + geom_line() +
    labs( x = &amp;quot;number of terms&amp;quot;, y = &amp;quot;Madhava sum&amp;quot;,
          title = plotTitle)
  print(p)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2017-09-27-madhava-graph-advice_files/figure-html/unnamed-chunk-8-1.png&#34; width=&#34;90%&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Hence we can fill in the outline of our function a bit:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;madhavaGraph &amp;lt;- function(n = 10) {
  
  validate the input: if n isn&amp;#39;t at least 1, stop the function
    
  find the sums:
    * the sum of the first term (4)
    * the sum of the first and second terms (4 - 4/3)
    * the sum of the first three terms ( 4 - 4/3 + 4/5)
    * and so on until ...
    * the sum of the first n terms
  make sure these sums are stored in a vector (let&amp;#39;s call it &amp;quot;results&amp;quot;)
  
 plotTitle &amp;lt;- paste0(&amp;quot;The first &amp;quot;, n, &amp;quot; Madhava sums&amp;quot;)
  p &amp;lt;- ggplot(mapping = aes(x = terms, y = results)) +
    geom_point() + geom_line() +
    labs( x = &amp;quot;number of terms&amp;quot;, y = &amp;quot;Madhava sum&amp;quot;,
          title = plotTitle)
  print(p)
  
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;finding-and-storing-the-sums&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Finding and Storing the Sums&lt;/h2&gt;
&lt;p&gt;The outline for this part of the task looked like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;get the sum of the first term (just 1)&lt;/li&gt;
&lt;li&gt;get the sum of the first and second terms (&lt;span class=&#34;math inline&#34;&gt;\(4 - 4/3\)&lt;/span&gt;)&lt;/li&gt;
&lt;li&gt;get the sum of the first three terms (&lt;span class=&#34;math inline&#34;&gt;\(4 - 4/3 + 4/5\)&lt;/span&gt;)&lt;/li&gt;
&lt;li&gt;and so on until …&lt;/li&gt;
&lt;li&gt;get the sum of the first n terms&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;At each step in above process, we will need to store our sum in the &lt;code&gt;results&lt;/code&gt; vector, so that it isn’t lost.&lt;/p&gt;
&lt;p&gt;The natural way to accomplish the above task is to use a &lt;code&gt;for&lt;/code&gt;-loop in which we iterate by index and store results. The outline of such a loop is:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;results &amp;lt;- numeric(n)
for ( i in 1:n ) {
  
  results[i] &amp;lt;- the sum of the first i terms
  
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We already know how to find the sum of the first &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; terms: we can just use the function &lt;code&gt;madhavaPI()&lt;/code&gt; from Chapter 3:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;madhavaPI &amp;lt;- function(n = 1000000) {
  k &amp;lt;- 1:n
  terms &amp;lt;- (-1)^(k+1)*4/(2*k-1)
  sum(terms)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Hence when you are working inside the loop, you can get and store the results all in one line:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;results[i] &amp;lt;- madhavaPI(i)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Well, to be totally truthful, you can do this &lt;em&gt;provided that&lt;/em&gt; R knows what &lt;code&gt;madhavaPI()&lt;/code&gt; is. Hence you must either:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;hope that whoever uses &lt;code&gt;madhavaGraph()&lt;/code&gt; has &lt;code&gt;madhavaPI()&lt;/code&gt; in their Global Environment so that &lt;code&gt;madhavaGraph()&lt;/code&gt; can look up the name &lt;code&gt;madhavaPI&lt;/code&gt; when it needs it, or&lt;/li&gt;
&lt;li&gt;define &lt;code&gt;madhavaPI()&lt;/code&gt; inside the body of &lt;code&gt;madhavaGraph()&lt;/code&gt;, before you start computing any sums.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The latter seems to be the safer choice!&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;put-it-all-together&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Put It All Together&lt;/h2&gt;
&lt;p&gt;You still have the task of filling in the outline completely and then testing &lt;code&gt;madhavaGraph()&lt;/code&gt; until it works.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;The function itself does not need to load &lt;strong&gt;ggplot2&lt;/strong&gt;, but you should make sure to tell anyone who plans to use the function that they need to load the package!&lt;a href=&#34;#fnref1&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Demo Sites for Blogdown-ified Hugo Themes</title>
      <link>/post/blogdown-demo-sites/</link>
      <pubDate>Mon, 05 Jun 2017 20:00:00 +0000</pubDate>
      
      <guid>/post/blogdown-demo-sites/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/rstudio/blogdown&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;blogdown&lt;/strong&gt;&lt;/a&gt;, Yihui Xie&amp;rsquo;s new Hugo-based R-package for blogging, has begun to take off.&lt;/p&gt;

&lt;p&gt;You can create a new site using any Hugo theme, but sometimes you must customize the theme a bit in order to enable certain expected features&amp;mdash;such as MathJax&amp;mdash;that are expected by bloggers who deal in statistics.  If you are new to static-site generators then you might prefer to have someone else handle the tweaks for you so you can get to blogging right away.  The study of the Hugo &lt;a href=&#34;https://gohugo.io/overview/introduction/&#34; target=&#34;_blank&#34;&gt;documentation&lt;/a&gt; can be deferred for a bit.&lt;/p&gt;

&lt;p&gt;Yihui&amp;rsquo;s tweak of the Lithium theme works great out of the box:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;blogdown::new_site(theme = &amp;quot;yihui/hugo-lithium-theme&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You could also try my tweak of the sparse-but-wild &lt;a href=&#34;https://github.com/dt801ts/sublime-hugo-theme&#34; target=&#34;_blank&#34;&gt;Sublime&lt;/a&gt; theme:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;blogdown::new_site(theme = &amp;quot;homerhanumat/sublimer-hugo&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The demo site for my Sublime tweak is &lt;a href=&#34;https://homerhanumat.rbind.io/&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;
.&lt;/p&gt;

&lt;p&gt;I have also tweaked the beautiful and minimal theme &lt;a href=&#34;https://github.com/zhe/hugo-theme-slim&#34; target=&#34;_blank&#34;&gt;Slim&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;blogdown::new_site(theme = &amp;quot;homerhanumat/hugo-theme-slim&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The demo site is &lt;a href=&#34;https://slimdemo.netlify.com/&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Happy blogging!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hosting on your Github User Page via Submodule</title>
      <link>/post/hosting-on-your-github-user-page-via-submodule/</link>
      <pubDate>Sun, 28 May 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/hosting-on-your-github-user-page-via-submodule/</guid>
      <description>&lt;p&gt;My primary technical blog is hosted by Github through my User repository (&lt;code&gt;homerhanumat.github.io&lt;/code&gt;).  Recently I switched my generator from Jekyll to Hugo.&lt;/p&gt;

&lt;p&gt;From the User repository Github Pages requires that the site be served from the root of the repository (not from &lt;code&gt;docs&lt;/code&gt;).  Jekyll allowed us to build the site into the root, but Hugo builds into a specific directory, named &lt;code&gt;public&lt;/code&gt; by default.  Building into the root would look a bit messy, anyway.&lt;/p&gt;

&lt;p&gt;I decided to handle the problem by creating a separate repository for my source code, then making the &lt;code&gt;public&lt;/code&gt; directory into a submodule of the source repo, with a remote pointed to my User repo.  The idea is taken from &lt;a href=&#34;https://stackoverflow.com/questions/12514197/convert-a-git-folder-to-a-submodule-retrospectively&#34; target=&#34;_blank&#34;&gt;Stackoverflow&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;First make sure you have initialized your project as a git repository.  Go ahead and set the remote to a repo on Github&amp;mdash;or wherever you like, really.&lt;/p&gt;

&lt;p&gt;Build your site with Hugo.  You now have a &lt;code&gt;public&lt;/code&gt; directory.  Then do the following in the terminal (replacing &amp;ldquo;username&amp;rdquo; with your own Github username):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd public
git init
git remote add origin https://github.com/username/username.github.io.git
git add .
touch .nojekyll  # so Github will not attempt to serve the site with Jekyll
git commit -am &#39;first commit in submodule&#39;
git push
cd ..
rm -rf public
git commit -am &#39;deleting folder&#39;
git submodule add https://github.com/username/username.github.io.git public
git commit -am &#39;adding submodule&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now when you commit and push from the root of your project, the changes go to the remote for your source.  When you want to push changes up to the website itself, &lt;code&gt;cd&lt;/code&gt; into &lt;code&gt;public&lt;/code&gt;, commit changes and push to the &lt;code&gt;username.gihub.io&lt;/code&gt; remote.&lt;/p&gt;

&lt;p&gt;When Hugo serves your site it modifies files in &lt;code&gt;public&lt;/code&gt; but leaves alone files that no longer correspond to anything in your source.  Sometimes you need to remove these files, so it&amp;rsquo;s recommended to make a clean start:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;rm -rf public
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But you should NOT do this!  You&amp;rsquo;ll lose &lt;code&gt;.git&lt;/code&gt; and your submodule along with it.&lt;/p&gt;

&lt;p&gt;When you need to remove junk files, it&amp;rsquo;s easiest to remove all files except &lt;code&gt;.nojekyll&lt;/code&gt; and the &lt;code&gt;git&lt;/code&gt; directory.  This can be accomplished from the terminal as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;shopt -s extglob
cd public
rm -rf !(.nojekyll|.git)
cd ..   # back to the root of the project
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you can serve the site and &lt;code&gt;public&lt;/code&gt; will be replenished.&lt;/p&gt;

&lt;p&gt;My remote source repo is at:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/homerhanumat/hugoBlog.git&#34; target=&#34;_blank&#34;&gt;https://github.com/homerhanumat/hugoBlog.git&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can see that the &lt;code&gt;public&lt;/code&gt; directory appears as a submodule.  Click on it and you&amp;rsquo;ll come to the User repo:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/homerhanumat/homerhanumat.github.io.git&#34; target=&#34;_blank&#34;&gt;https://github.com/homerhanumat/homerhanumat.github.io.git&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The blog itself is hosted from this latter repo.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Installing the Addinplots Package</title>
      <link>/post/2016-03-11-rstudio-addinplots-installation/</link>
      <pubDate>Fri, 11 Mar 2016 18:00:00 +0000</pubDate>
      
      <guid>/post/2016-03-11-rstudio-addinplots-installation/</guid>
      <description>&lt;p&gt;This is a quick note for instructors interested in installing the &lt;code&gt;addinplots&lt;/code&gt; package.&lt;/p&gt;

&lt;p&gt;First of all, you need a recent version of RStudio that enables Addins.  At the time of writing this is version 0.99.891.&lt;/p&gt;

&lt;p&gt;You&amp;rsquo;ll need several packages from CRAN, so run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;install.packages(c(&amp;quot;devtools&amp;quot;,&amp;quot;shiny&amp;quot;,&amp;quot;miniUI&amp;quot;,
                   &amp;quot;Hmisc&amp;quot;,&amp;quot;rstudioapi&amp;quot;,&amp;quot;lattice&amp;quot;,&amp;quot;devtools&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Run this even if you already have some of these packages:  you will need up-to-date versions.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;devtools&lt;/code&gt; package allows you to install packages from GitHub.  Run the following two commands:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;devtools::install_github(&amp;quot;homerhanumat/shinyCustom&amp;quot;)
devtools::install_github(&amp;quot;homerhanumat/addinplots&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;addinplots&lt;/code&gt; package is now installed.  Refer to the previous post for details on use.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>RStudio Addin Code-Helpers for Plotting</title>
      <link>/post/2016-01-21-rstudio-addin-code-helpers-for-plotting/</link>
      <pubDate>Thu, 21 Jan 2016 18:00:00 +0000</pubDate>
      
      <guid>/post/2016-01-21-rstudio-addin-code-helpers-for-plotting/</guid>
      <description>&lt;p&gt;There are many benefits to teaching undergraduate statistics with R&amp;ndash;especially in the RStudio environment&amp;ndash;but it must be admitted that the learning curve is fairly steep, especially when it comes to tinkering with plots to get them to look just the way one wants.  If there were ever a situation when I would prefer that the students have access to a graphical user interface, production of plots would be it.&lt;/p&gt;

&lt;p&gt;You can, of course, write Shiny apps like &lt;a href=&#34;https://homer.shinyapps.io/bwplotAddin/&#34; target=&#34;_blank&#34;&gt;this one&lt;/a&gt;, where the user controls features of the graphs through various input-widgets.  But then the user must visit the remote site, and if he or she wishes to build a graph from a data frame not supplied by the app, then the app has to deal with thorny issues surrounding the uploading and processing of .csv files, and in the end the user still has to copy and paste the relevant graph-making code back to wherever it was needed.&lt;/p&gt;

&lt;p&gt;It would be much nicer if all of this could be accomplished locally.  &lt;code&gt;mPlot()&lt;/code&gt; in &lt;a href=&#34;https://cran.r-project.org/web/packages/mosaic/index.html&#34; target=&#34;_blank&#34;&gt;package &lt;code&gt;mosaic&lt;/code&gt;&lt;/a&gt; does a great job in this respect by taking advantage of RStudio&amp;rsquo;s &lt;code&gt;manipulate&lt;/code&gt; package.  However, &lt;code&gt;manipulate&lt;/code&gt; doesn&amp;rsquo;t offer much flexibility in terms of control of inputs, so it&amp;rsquo;s not feasible within the &lt;code&gt;manipulate&lt;/code&gt; framework to write a code-helper that allows much fine-tuning one&amp;rsquo;s plot.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://rstudio.github.io/rstudioaddins/&#34; target=&#34;_blank&#34;&gt;Addins&lt;/a&gt; (a new feature in the current RStudio &lt;a href=&#34;https://www.rstudio.com/products/rstudio/download/preview/&#34; target=&#34;_blank&#34;&gt;Preview Version&lt;/a&gt;) permit us to have the best of both worlds.  An Addin works like a locally-run Shiny app.  As such it can draw on information available in the user&amp;rsquo;s R session, and it can return information directly to where the user needs it in a source document such as an R script or R Markdown file.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/homerhanumat/addinplots&#34; target=&#34;_blank&#34;&gt;addinplots&lt;/a&gt; is a package of Addins, each of which is a code-helper for a particular type of plot in the &lt;code&gt;lattice&lt;/code&gt; graphing system.  The intention is to help students (and colleagues who are newcomers to &lt;code&gt;lattice&lt;/code&gt;) to make reasonably well-customized graphs while teaching&amp;ndash;through example&amp;ndash;the rudiments of the coding principles of the &lt;code&gt;lattice&lt;/code&gt; package.&lt;/p&gt;

&lt;p&gt;If you are using the Preview version of RStudio and would like to give these Addins a try, then follow the installation directions in the &lt;a href=&#34;http://rstudio.github.io/rstudioaddins/&#34; target=&#34;_blank&#34;&gt;article cited above&lt;/a&gt;.  In addition, install my package and one of its dependencies, as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;devtools::install_github(&amp;quot;homerhanumat/shinyCustom&amp;quot;)
devtools::install_github(&amp;quot;homerhanumat/addinplots&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To use an Addin:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Type the name of a data frame into an R script, or inside a code chunk in an R Markdown document.&lt;/li&gt;
&lt;li&gt;Select the name.&lt;/li&gt;
&lt;li&gt;Go to the Addins button and pick the Addin for the plot you wish to make.&lt;/li&gt;
&lt;li&gt;The Addin will walk you through the process of constructing a graph based upon variables in your data frame.  At each step you see the graph to that point, along with R-code to produce said graph.&lt;/li&gt;
&lt;li&gt;When you are happy with your graph press the Done button. The app will go dark.&lt;/li&gt;
&lt;li&gt;Close the app tab and return to RStudio.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You will see that the code for your graph has been inserted in place of the name of the data frame.&lt;/p&gt;

&lt;p&gt;These Addins are flexible enough to handle the everyday needs of beginning students in undergraduate statistics classes, but they only scratch the surface of &lt;code&gt;lattice&lt;/code&gt;&amp;rsquo;s capability.  Eventually students should graduate to coding directly with &lt;code&gt;lattice&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;My Addins are scarcely more than toys, and clunky ones at that.  I imagine that before long other folks will have written a host of Addins that accomplish some quite sophisticated tasks and make the R environment much more &amp;ldquo;GUI.&amp;rdquo;  I&amp;rsquo;m excited to see what will happen.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note on addinplot performance&lt;/em&gt;:  My Addins are intended for use in a classroom setting where the entire class is working on a single not-so-powerful RStudio server.  Accordingly many of the input controls have been customized to inhibit their propensity to update.  When you are entering text or a number, you need to press Enter or shift focus away from the input area in order to cue the machine to update your information.  You will also note (in the &lt;code&gt;cloudplotAddin&lt;/code&gt;) that sliders take a bit longer to &amp;ldquo;respond&amp;rdquo;.  These input-damping behaviors, enabled by the &lt;a href=&#34;https://github.com/homerhanumat/shinyCustom&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;shinyCustom&lt;/code&gt;&lt;/a&gt; package, prevent the Server from being overwhelmed by numerous requests for expensive graph-computations that most users don&amp;rsquo;t really want.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Notes on LaTeX Installation for R Studio</title>
      <link>/post/2015-12-19-latex-rstudio-debian/</link>
      <pubDate>Sat, 19 Dec 2015 20:00:00 +0000</pubDate>
      
      <guid>/post/2015-12-19-latex-rstudio-debian/</guid>
      <description>

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;These are notes to myself and for colleagues in IT.  May they also prove helpful to those who land upon them from Google.&lt;/p&gt;

&lt;p&gt;From time to time I have to set up R and the R Studio server, configured in such a way that all users can knit their R Markdown documents to PDF with minimal chance of problems.  I assume also that some of those users may wish to use LaTeX for other purposes, so I need to start with a reasonably complete distribution of LaTeX and to be able to install or update specific LateX packages as I discover the need for them.&lt;/p&gt;

&lt;p&gt;The notes below are based upon experience with Debian Jesse 8.2.  With minor modifications they should apply to other major Linux distributions. (&lt;strong&gt;Note (May, 2017)&lt;/strong&gt;:  They also worked on a CentOS &amp;amp; system, with the addition of the perl module &lt;code&gt;perl-Digest-MD5&lt;/code&gt;.)&lt;/p&gt;

&lt;p&gt;I assume that you have R and R Studio installed and working to your satisfaction.&lt;/p&gt;

&lt;h2 id=&#34;r-packages-to-remember&#34;&gt;R Packages to Remember&lt;/h2&gt;

&lt;p&gt;We want:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;rmarkdown&lt;/code&gt; (for conversion)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;caTools&lt;/code&gt; (forconversion)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bitopts&lt;/code&gt; (for conversion)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;knitr&lt;/code&gt; (in case users need it in their R Markdown sources)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So log on to the server and run:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo R
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, in R:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(c(&amp;quot;knitr&amp;quot;, ,&amp;quot;caTools&amp;quot;, &amp;quot;bitops&amp;quot;,&amp;quot;rmarkdown&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;pandoc&#34;&gt;Pandoc&lt;/h2&gt;

&lt;p&gt;(This might be needed.)  Make sure that users call a version of Pandoc that R Studio likes.  To do this make sym links to the version that comes with R Studio:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo ln -s /usr/lib/rstudio-server/bin/pandoc/pandoc-citeproc /usr/local/bin
sudo ln -s /usr/lib/rstudio-server/bin/pandoc/pandoc /usr/local/bin
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;installing-latex-packages&#34;&gt;Installing LaTeX Packages&lt;/h2&gt;

&lt;p&gt;You can get Tex Live from the Debian repositories, but for long-term maintenance the best thing is probably to install it directly from a CTAN mirror.  You won&amp;rsquo;t get automatic updates through Debian, but updates from CTAN will be easy using the &lt;code&gt;tlmgr&lt;/code&gt; package that comes with LaTeX.&lt;/p&gt;

&lt;p&gt;So consult the &lt;a href=&#34;https://www.tug.org/texlive/doc/texlive-en/texlive-en.html&#34; target=&#34;_blank&#34;&gt;Tex Live Guide&lt;/a&gt;.  Go to &lt;a href=&#34;http://mirror.ctan.org/systems/texlive/tlnet&#34; target=&#34;_blank&#34;&gt;http://mirror.ctan.org/systems/texlive/tlnet&lt;/a&gt; and be directed automatically to an appropriate mirror. Then download &lt;code&gt;install-tl-unx.tar.gz&lt;/code&gt;.  Extract and cd into the directory.  Then run:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo perl install-tl
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You get the text-only installer.&lt;/p&gt;

&lt;p&gt;Study the options in the Guide.  If space is a consideration (as it was in Debian VM that I used to do the research for this post), then under Schemes (&lt;code&gt;&amp;lt;S&amp;gt;&lt;/code&gt;) you might go for &lt;strong&gt;medium&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Under Options make sure to select &lt;code&gt;&amp;lt;L&amp;gt;&lt;/code&gt; to create sym links to the binaries.  You can just click through to accept the suggested values for the three sym link locations.&lt;/p&gt;

&lt;p&gt;Now you can proceed with the installation.&lt;/p&gt;

&lt;p&gt;If you did not perform a full installation of LaTeX, then you are probably missing a few packages.  As of the time of writing, the medium installation was missing  &lt;code&gt;framed&lt;/code&gt; and &lt;code&gt;titling&lt;/code&gt; for basic knitting, and &lt;code&gt;inconsolata&lt;/code&gt; for those users who run checks on R packages.  This is where &lt;code&gt;tlmgr&lt;/code&gt; comes in:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo tlmgr install framed titling inconsolata
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the long run you can use &lt;code&gt;tlmgr&lt;/code&gt; for updating packages as well.&lt;/p&gt;

&lt;h2 id=&#34;test&#34;&gt;Test&lt;/h2&gt;

&lt;p&gt;Log on to the Server as a regular user, create a new R Markdown file (the sample should do), save it and Knit to PDF.  The smaller your installation of LateX, the more packages you will be missing.  Go through your error messages one by one, using &lt;code&gt;sudo tlmgr&lt;/code&gt; to install each required package as its absence is made known to you.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>An Easy Start with Jekyll, for R-Bloggers</title>
      <link>/post/2015-12-15-jekyll-r-blogger-knitr-hyde/</link>
      <pubDate>Tue, 15 Dec 2015 20:00:00 +0000</pubDate>
      
      <guid>/post/2015-12-15-jekyll-r-blogger-knitr-hyde/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Note (May, 2017)&lt;/strong&gt;:  The blogging approach described below has been superceded by the Yihui Xie&amp;rsquo;s &lt;strong&gt;blogdown&lt;/strong&gt; package.  Consult the blogdown &lt;a href=&#34;https://github.com/rstudio/blogdown&#34; target=&#34;_blank&#34;&gt;repository&lt;/a&gt; and the R Studio &lt;a href=&#34;https://www.rstudio.com/resources/webinars/&#34; target=&#34;_blank&#34;&gt;webinar&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I would like my upper-level students to get more practice in writing about their data analysis work (well, to get get more practice in writing, generally).  Blogging is one device by which students can be motivated to write carefully, with a particular audience in mind. So why not have students blog about aspects of their R-work?&lt;/p&gt;

&lt;p&gt;Students need cheap hosting:  as long as they know their way around git and Git Hub, then Git Hub Pages are a great (free) solution for that.  But then of course they have to use Jekyll, think about web design issues, etc., and on top of that if they plan to blog seriously about R they are probably going to want to write from an R Markdown source document rather than from Markdown.&lt;/p&gt;

&lt;p&gt;All of this requires a lot of thinking about technical tools, at a time when students should focus as much as possible on fundamentals.  Learning R is already enough of a technical challenge!  Hence I decided to cobble together a framework that flattens the learning curve for students as much as possible.&lt;/p&gt;

&lt;p&gt;Yihui Xie&amp;rsquo;s &lt;a href=&#34;https://github.com/yihui/servr&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;servr&lt;/code&gt;&lt;/a&gt; package and &lt;a href=&#34;https://github.com/yihui/knitr-jekyll&#34; target=&#34;_blank&#34;&gt;knitr-jekyll&lt;/a&gt; code are a great way to address the R Markdown issue and to keep Jekyll in the background.&lt;/p&gt;

&lt;p&gt;The remaining concern is site layout and styling.  For this I chose to work from Mark Otto&amp;rsquo;s excellent &lt;a href=&#34;https://github.com/poole/hyde&#34; target=&#34;_blank&#34;&gt;Hyde project&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I added a few bells and whistles in the form of options for Disqus commenting and a couple of social media share buttons.  It ain&amp;rsquo;t much but it will get the students going, I hope.&lt;/p&gt;

&lt;p&gt;And it occurs to me that if you yourself are not yet a blogger then you might want to give my system a try.  The project repository is &lt;a href=&#34;https://github.com/homerhanumat/knitr-hyde&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;,  The resulting site (with directions for use) is &lt;a href=&#34;https://homerhanumat.github.io/knitr-hyde&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the future it would be interesting to investigate more modular ways of hooking Xihui&amp;rsquo;s &lt;code&gt;knitr-jekyll&lt;/code&gt; to other Jekyll projects, e.g., &lt;a href=&#34;http://octopress.org/&#34; target=&#34;_blank&#34;&gt;Octopress&lt;/a&gt;.  If you are aware of any efforts along these lines, please let me know.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Tutorial on Writing Simulation Apps in Shiny</title>
      <link>/post/2015-07-03-shiny-simulation-tutorial/</link>
      <pubDate>Fri, 03 Jul 2015 19:00:00 +0000</pubDate>
      
      <guid>/post/2015-07-03-shiny-simulation-tutorial/</guid>
      <description>&lt;p&gt;(&lt;strong&gt;Edited November 25, 2015.&lt;/strong&gt;)  I stand in awe of the R wizards who post their latest and greatest &lt;a href = &#34;http://shiny.rstudio.com&#34; target =&#34;_blank&#34;&gt;Shiny&lt;/a&gt; feats on R-Bloggers.  It&amp;rsquo;s taken me a while to find my way around Shiny, but at last I feel ready to fill in a few gaps for others who may be just starting out and who aspire to write reasonably involved, user-friendly simulation apps.  To make it a bit more fun I&amp;rsquo;ve written it up as an R Markdown document.&lt;/p&gt;

&lt;p&gt;I used to host the document on &lt;code&gt;shinyapps.io&lt;/code&gt;, but it pushed my monthly hours over their limit.  You can get the source code, however, from the &lt;a href=&#34;https://github.com/homerhanumat/shinyTutorials&#34; target=&#34;_blank&#34;&gt;GitHub repository&lt;/a&gt;.  Check the repo&amp;rsquo;s Readme for prerequisites and instructions on access.&lt;/p&gt;

&lt;p&gt;If you have feedback or suggestions for improvements, comment here or post an Issue on the GitHub site.  Happy learning!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Google Charts in R Markdown</title>
      <link>/post/2014-09-03-google-charts/</link>
      <pubDate>Wed, 03 Sep 2014 20:30:00 +0000</pubDate>
      
      <guid>/post/2014-09-03-google-charts/</guid>
      <description>&lt;div id=&#34;introduction&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;An excellent little post (&lt;a href=&#34;http://lamages.blogspot.com/2014/09/zoom-zoom-googlevis.html&#34;&gt;Zoom, zoom googleVis&lt;/a&gt;) showed up recently on &lt;a href=&#34;http://www.r-bloggers.com/&#34;&gt;R-Bloggers&lt;/a&gt;. The author Markus Gesmann is the maintainer of the &lt;code&gt;googleVis&lt;/code&gt; package that links R to the &lt;a href=&#34;https://developers.google.com/chart/interactive/docs/gallery&#34;&gt;Google Charts API&lt;/a&gt;. My first thought was: could I embed charts like those in R Markdown documents that could knit to ioslides or other formats suitable for use in my elementary statistics classes?&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;A quick look at the documentation showed that it’s very easy indeed to do this sort of thing.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;extrapolation&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Extrapolation&lt;/h2&gt;
&lt;p&gt;Suppose, for example, that you want to illustrate to students the risks associated with extrapolation. You begin by reminding them of the experience they had back in high school with their graphing calculators, when they zoomed in on a curve: zoom in close enough, and it looks like a straight line.&lt;/p&gt;
&lt;p&gt;Then you point out that for the most part we live our lives from a “zoomed-in” perspective, at least where data is concerned. In situations where we are interested in a pair of numerical measurements on individuals, we usually possess &lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt;-values for only a fairly narrow range of &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;-values. Hence it is likely that a scatter plot we make from our “zoomed-in” data will show a roughly linear relationship, even though on a global scale the “real” relationship probably is some kind of a curve.&lt;/p&gt;
&lt;p&gt;The app below (a slight modification of the example in Gesmann’s post) makes the point in a flash. Click and drag to establish a zoom region, right-click to reset:&lt;/p&gt;
&lt;!-- ScatterChart generated in R 3.4.0 by googleVis 0.6.2 package --&gt;
&lt;!-- Sat May 27 22:53:45 2017 --&gt;
&lt;!-- jsHeader --&gt;
&lt;script type=&#34;text/javascript&#34;&gt;
 
// jsData 
function gvisDataZoomZoom () {
var data = new google.visualization.DataTable();
var datajson =
[
 [
0,
2537.697212
],
[
0.5,
2480.404837
],
[
1,
2291.197683
],
[
1.5,
2239.20941
],
[
2,
2024.346568
],
[
2.5,
2328.30735
],
[
3,
2302.912102
],
[
3.5,
2139.312225
],
[
4,
2291.913135
],
[
4.5,
2081.986679
],
[
5,
1939.687718
],
[
5.5,
2071.175918
],
[
6,
2055.637296
],
[
6.5,
1855.09161
],
[
7,
1836.673977
],
[
7.5,
1986.254312
],
[
8,
1934.399588
],
[
8.5,
1418.373539
],
[
9,
1452.102505
],
[
9.5,
1646.080349
],
[
10,
1817.436525
],
[
10.5,
1670.068265
],
[
11,
1552.822032
],
[
11.5,
1474.935244
],
[
12,
1527.426874
],
[
12.5,
1426.125064
],
[
13,
1498.784138
],
[
13.5,
1425.921831
],
[
14,
1281.256681
],
[
14.5,
1271.293199
],
[
15,
1143.749534
],
[
15.5,
1115.879783
],
[
16,
1265.534507
],
[
16.5,
1365.787371
],
[
17,
1127.811847
],
[
17.5,
1085.312767
],
[
18,
995.4401713
],
[
18.5,
999.8514718
],
[
19,
904.9701396
],
[
19.5,
974.9688372
],
[
20,
990.8501134
],
[
20.5,
819.7440402
],
[
21,
810.8995988
],
[
21.5,
739.6464023
],
[
22,
665.9922973
],
[
22.5,
781.5574713
],
[
23,
691.9288703
],
[
23.5,
704.4679564
],
[
24,
742.0044122
],
[
24.5,
699.1293635
],
[
25,
606.1210083
],
[
25.5,
660.3859521
],
[
26,
508.6239947
],
[
26.5,
599.8550241
],
[
27,
540.8753228
],
[
27.5,
518.3726283
],
[
28,
465.3953206
],
[
28.5,
329.4228811
],
[
29,
384.3077049
],
[
29.5,
478.1333933
],
[
30,
590.9037231
],
[
30.5,
405.3257043
],
[
31,
201.1684941
],
[
31.5,
662.4131747
],
[
32,
419.5235375
],
[
32.5,
343.1144616
],
[
33,
381.2919068
],
[
33.5,
251.6978654
],
[
34,
265.2966701
],
[
34.5,
257.076218
],
[
35,
304.5839125
],
[
35.5,
374.8505607
],
[
36,
24.30756836
],
[
36.5,
150.4156894
],
[
37,
78.5860028
],
[
37.5,
85.85072033
],
[
38,
-33.80994618
],
[
38.5,
60.02448374
],
[
39,
125.615421
],
[
39.5,
134.6158021
],
[
40,
162.8331306
],
[
40.5,
87.78614177
],
[
41,
312.4153309
],
[
41.5,
89.97102573
],
[
42,
-38.44147667
],
[
42.5,
283.7181301
],
[
43,
-139.9056665
],
[
43.5,
151.6451601
],
[
44,
220.6167027
],
[
44.5,
82.35326735
],
[
45,
-128.2962108
],
[
45.5,
-173.6864969
],
[
46,
64.69165381
],
[
46.5,
136.7736691
],
[
47,
-12.72734263
],
[
47.5,
-71.70931145
],
[
48,
38.88744997
],
[
48.5,
70.422425
],
[
49,
-52.14613874
],
[
49.5,
-67.48934215
],
[
50,
-172.8783941
],
[
50.5,
-98.87609916
],
[
51,
-57.55055617
],
[
51.5,
40.6021748
],
[
52,
78.66649197
],
[
52.5,
-86.59209118
],
[
53,
-24.81762967
],
[
53.5,
166.7614015
],
[
54,
42.65088778
],
[
54.5,
50.20339324
],
[
55,
-7.280201955
],
[
55.5,
173.7847433
],
[
56,
136.6527204
],
[
56.5,
-129.6913636
],
[
57,
78.89204617
],
[
57.5,
-26.2225636
],
[
58,
-55.95898328
],
[
58.5,
-55.38871173
],
[
59,
68.68219333
],
[
59.5,
306.8442199
],
[
60,
68.77170251
],
[
60.5,
146.9939225
],
[
61,
247.9439261
],
[
61.5,
-94.23538391
],
[
62,
15.01500904
],
[
62.5,
175.0385938
],
[
63,
244.1642855
],
[
63.5,
360.7181336
],
[
64,
346.8271736
],
[
64.5,
114.9338291
],
[
65,
235.342274
],
[
65.5,
179.6939502
],
[
66,
246.2399374
],
[
66.5,
259.9051893
],
[
67,
184.5320483
],
[
67.5,
298.762966
],
[
68,
500.0135333
],
[
68.5,
199.0380413
],
[
69,
627.2201028
],
[
69.5,
251.1308468
],
[
70,
401.5101774
],
[
70.5,
416.2819428
],
[
71,
660.1440323
],
[
71.5,
264.606245
],
[
72,
530.3665665
],
[
72.5,
480.0287843
],
[
73,
415.4285494
],
[
73.5,
573.3799481
],
[
74,
585.9427928
],
[
74.5,
294.5816348
],
[
75,
590.2863346
],
[
75.5,
455.5873842
],
[
76,
654.3923354
],
[
76.5,
557.3303521
],
[
77,
763.5434061
],
[
77.5,
775.0702394
],
[
78,
671.2147217
],
[
78.5,
817.2950343
],
[
79,
772.7300908
],
[
79.5,
935.0553817
],
[
80,
961.0364487
],
[
80.5,
878.9843067
],
[
81,
1036.440589
],
[
81.5,
1011.060497
],
[
82,
831.1714369
],
[
82.5,
1179.832136
],
[
83,
1121.827731
],
[
83.5,
1036.758551
],
[
84,
966.4311784
],
[
84.5,
1274.919241
],
[
85,
1349.402511
],
[
85.5,
1283.875996
],
[
86,
1219.930646
],
[
86.5,
1409.472096
],
[
87,
1435.155675
],
[
87.5,
1246.876663
],
[
88,
1224.965309
],
[
88.5,
1364.574604
],
[
89,
1626.000513
],
[
89.5,
1559.679692
],
[
90,
1572.398767
],
[
90.5,
1725.102129
],
[
91,
1576.106534
],
[
91.5,
1548.891366
],
[
92,
2005.413909
],
[
92.5,
1786.685823
],
[
93,
1941.678696
],
[
93.5,
1820.903637
],
[
94,
1806.025829
],
[
94.5,
2068.67964
],
[
95,
2145.064152
],
[
95.5,
1953.216022
],
[
96,
2192.147189
],
[
96.5,
2249.259024
],
[
97,
2136.275729
],
[
97.5,
2318.912073
],
[
98,
2194.855727
],
[
98.5,
2300.640547
],
[
99,
2402.693396
],
[
99.5,
2516.349069
],
[
100,
2427.046688
] 
];
data.addColumn(&#39;number&#39;,&#39;x&#39;);
data.addColumn(&#39;number&#39;,&#39;y&#39;);
data.addRows(datajson);
return(data);
}
 
// jsDrawChart
function drawChartZoomZoom() {
var data = gvisDataZoomZoom();
var options = {};
options[&#34;allowHtml&#34;] = true;
options[&#34;explorer&#34;] = {actions: [&#39;dragToZoom&#39;,
                     &#39;rightClickToReset&#39;],
                     maxZoomIn:0.05};
options[&#34;chartArea&#34;] = {width:&#39;85%&#39;,height:&#39;80%&#39;};
options[&#34;hAxis&#34;] = {title: &#39;Explanatory x&#39;,
                     titleTextStyle: {color: &#39;#000000&#39;}};
options[&#34;vAxis&#34;] = {title: &#39;Response y&#39;,
                     titleTextStyle: {color: &#39;#000000&#39;}};
options[&#34;title&#34;] = &#34;Curvilinear Relationship&#34;;
options[&#34;width&#34;] = 550;
options[&#34;height&#34;] = 500;
options[&#34;legend&#34;] = &#34;none&#34;;

    var chart = new google.visualization.ScatterChart(
    document.getElementById(&#39;ZoomZoom&#39;)
    );
    chart.draw(data,options);
    

}
  
 
// jsDisplayChart
(function() {
var pkgs = window.__gvisPackages = window.__gvisPackages || [];
var callbacks = window.__gvisCallbacks = window.__gvisCallbacks || [];
var chartid = &#34;corechart&#34;;
  
// Manually see if chartid is in pkgs (not all browsers support Array.indexOf)
var i, newPackage = true;
for (i = 0; newPackage &amp;&amp; i &lt; pkgs.length; i++) {
if (pkgs[i] === chartid)
newPackage = false;
}
if (newPackage)
  pkgs.push(chartid);
  
// Add the drawChart function to the global list of callbacks
callbacks.push(drawChartZoomZoom);
})();
function displayChartZoomZoom() {
  var pkgs = window.__gvisPackages = window.__gvisPackages || [];
  var callbacks = window.__gvisCallbacks = window.__gvisCallbacks || [];
  window.clearTimeout(window.__gvisLoad);
  // The timeout is set to 100 because otherwise the container div we are
  // targeting might not be part of the document yet
  window.__gvisLoad = setTimeout(function() {
  var pkgCount = pkgs.length;
  google.load(&#34;visualization&#34;, &#34;1&#34;, { packages:pkgs, callback: function() {
  if (pkgCount != pkgs.length) {
  // Race condition where another setTimeout call snuck in after us; if
  // that call added a package, we must not shift its callback
  return;
}
while (callbacks.length &gt; 0)
callbacks.shift()();
} });
}, 100);
}
 
// jsFooter
&lt;/script&gt;
&lt;!-- jsChart --&gt;
&lt;script type=&#34;text/javascript&#34; src=&#34;https://www.google.com/jsapi?callback=displayChartZoomZoom&#34;&gt;&lt;/script&gt;
&lt;!-- divChart --&gt;
&lt;div id=&#34;ZoomZoom&#34; style=&#34;width: 550; height: 500;&#34;&gt;

&lt;/div&gt;
&lt;p&gt;All we needed was the following code (be sure to add the chunk option &lt;code&gt;results=&#39;asis&#39;&lt;/code&gt;):&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;set.seed(2020)
x &amp;lt;- seq(0,100,by=0.5)
y &amp;lt;- (50-x)^2+rnorm(length(x),sd=100)

curvy &amp;lt;- data.frame(x,y)


gvScat &amp;lt;- gvisScatterChart(curvy,
                   options=list(
                     explorer=&amp;quot;{actions: [&amp;#39;dragToZoom&amp;#39;,
                     &amp;#39;rightClickToReset&amp;#39;],
                     maxZoomIn:0.05}&amp;quot;,
                     chartArea=&amp;quot;{width:&amp;#39;85%&amp;#39;,height:&amp;#39;80%&amp;#39;}&amp;quot;,
                     hAxis=&amp;quot;{title: &amp;#39;Explanatory x&amp;#39;,
                     titleTextStyle: {color: &amp;#39;#000000&amp;#39;}}&amp;quot;,
                     vAxis=&amp;quot;{title: &amp;#39;Response y&amp;#39;,
                     titleTextStyle: {color: &amp;#39;#000000&amp;#39;}}&amp;quot;,
                     title=&amp;quot;Curvilinear Relationship&amp;quot;,
                     width=550, height=500,
                     legend=&amp;quot;none&amp;quot;),
                   chartid=&amp;quot;ZoomZoom&amp;quot;)

print(gvScat,&amp;#39;chart&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The same approach works in any R Markdown document (including the source document for this Jekyll-powered post). I will certainly take a closer look at &lt;code&gt;googleVis&lt;/code&gt;: thanks, Markus!&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Five Reasons to Teach Elementary Statistics With R:  #3</title>
      <link>/post/2014-05-05-reasons-to-teach-with-r-3/</link>
      <pubDate>Mon, 05 May 2014 01:00:00 +0000</pubDate>
      
      <guid>/post/2014-05-05-reasons-to-teach-with-r-3/</guid>
      <description>&lt;div id=&#34;introduction&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;This is the third in a projected five-part series of posts aimed at colleagues who teach elementary statistics. If you teach with R but hesitate to spring such a powerful and complex tool on unsuspecting introductory students—many of whom whom will have had no prior experience with the command line, much less with coding—then I hope these posts will give you some encouragement.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;http://statistics.rainandrhino.org/blog/2014/04/08/reasons-to-teach-with-R-2/&#34;&gt;previous post&lt;/a&gt; in this series described R Studio’s package &lt;code&gt;manipulate&lt;/code&gt; and its applications in the easy authoring of instructional applets. Today we’ll look at &lt;code&gt;shiny&lt;/code&gt;, a related RStudio project.&lt;/p&gt;
&lt;p&gt;In order to try the ensuing examples, download an ancillary package that we use for our elementary course:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;require(devtools)
install_github(repo=&amp;quot;homerhanumat/tigerstats&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;reason-3-rstudios-shiny&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Reason #3: RStudio’s &lt;code&gt;shiny&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.rstudio.com/shiny/&#34;&gt;Shiny&lt;/a&gt; appears to be intended primarily for data analysts working in industry or in academic or institutional research, but on the very day of its public release Victor Moreno pointed out its implications for statistics education (see his comment on &lt;a href=&#34;http://blog.rstudio.org/2012/11/08/introducing-shiny/&#34;&gt;this RStudio blog post&lt;/a&gt;). For statistics instructors Shiny offers essentially the same benefits as &lt;code&gt;manipulate&lt;/code&gt;, but in addition comes pimped out with:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;options for dynamic user input;&lt;/li&gt;
&lt;li&gt;output formats that go well beyond &lt;code&gt;manipulate&lt;/code&gt;’s home in the Plots pane;&lt;/li&gt;
&lt;li&gt;default Bootstrap styling.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;examples&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Examples&lt;/h2&gt;
&lt;div id=&#34;slow-simulation&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;“Slow” Simulation&lt;/h3&gt;
&lt;p&gt;At my College we believe that simulation is important to understanding probability concepts, but we also find that our students don’t easily grasp the import of a simulation when the computers simply generates, say, 3000 re-samples and summarizes the results, &lt;em&gt;all in flash&lt;/em&gt;. We feel the need for plenty of “one at a time” simulation experiences that serve as transitions to the analysis of large-scale simulation results, and we don’t always find apps on the web that cater to our needs in just the way we would like.&lt;/p&gt;
&lt;p&gt;Suppose for example you are wondering whether a certain die is loaded. You don’t want to crack it open, so you roll it sixty times, getting the following results:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;center&#34;&gt;&lt;strong&gt;Spots&lt;/strong&gt;&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;One&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Two&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Three&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Four&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Five&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Six&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;&lt;strong&gt;Freq&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;18&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;11&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;7&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;7&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;This looks like an awful lot of two-spots, but we were not expecting this in advance. By this point in the course students have been made aware of the perils of “data snooping” and hence should be disinclined to employ an inferential procedure that is based specifically on a pattern that one happens to notice in one’s data. Therefore, rather than perform inferential procedures keyed to “Two-spot” side of the die, we might turn instead to the chi-square statistic as a neutral measure of the difference between the observed results and what one would expect if the die were fair.&lt;/p&gt;
&lt;p&gt;The situation is addressed in this Shiny app:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://homer.shinyapps.io/SlowGoodness&#34; class=&#34;uri&#34;&gt;https://homer.shinyapps.io/SlowGoodness&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;After re-sampling for a few minutes, students are convinced that it’s not so unlikely, after all to get results like the ones we observed, if the die is fair all along.&lt;/p&gt;
&lt;p&gt;Students are then prepared to understand a full-scale re-sampling simulation like the following one:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;require(tigerstats)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;observed &amp;lt;- c(8,18,11,7,9,7)
fair &amp;lt;- rep(1/6,6)
set.seed(2020)
chisqtestGC(observed,p=fair,
      simulate.p.value=TRUE,
      B=3000,graph=TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Pearson&amp;#39;s chi-squared test with simulated p-value 
##   (based on 3000 resamples) 
## 
##   Observed counts Expected by Null Contr to chisq stat
## A               8               10                 0.4
## B              18               10                 6.4
## C              11               10                 0.1
## D               7               10                 0.9
## E               9               10                 0.1
## F               7               10                 0.9
## 
## 
## Chi-Square Statistic = 8.8 
## Degrees of Freedom of the table = 5 
## P-Value = 0.1253&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2014-05-05-reasons-to-teach-with-R-3_files/figure-html/reasonsteachr3chisq-1.png&#34; width=&#34;432&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Sure enough, if the die is fair then there is a reasonably good chance—about 12.5%—of getting results at least as extreme as the ones we got in our 60 rolls.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Shiny users know that the apps are liable to run more quickly if you run them locally. To run the foregoing app locally from an R session, pull it out of the &lt;code&gt;tigerstats&lt;/code&gt; package:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;require(siny)
runApp(system.file(&amp;quot;SlowGoodness&amp;quot;,package=&amp;quot;tigerstats&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;understanding-model-assumptions&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Understanding Model Assumptions&lt;/h3&gt;
&lt;p&gt;Students tend to be somewhat rigid in their handling of “safety checks”—the diagnostics they are instructed to perform in order to judge whether the statistical model underlying a given inferential procedure is appropriate to the data at hand. This rigidity stems partly from a lack of understanding of what the inferential procedure is intended to deliver (for example, that a method for making 95%-confidence intervals for a parameter should produce intervals that cover the parameter about 95% of the time in repeated sampling), and partly from a lack of experience with situations in which the mathematical assumptions of the model are not perfectly satisfied.&lt;/p&gt;
&lt;p&gt;The following Shiny app:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;runApp(system.file(&amp;quot;CIMean&amp;quot;,package=&amp;quot;tigerstats&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;addresses two learning outcomes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;coverage properties of confidence intervals (e.g, what “95% confidence” means, from a frequentist point of view);&lt;/li&gt;
&lt;li&gt;the effect on coverage properties, at various sample sizes, of departures from normality assumptions in procedures based upon the t-statistic.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Both “slow” (one-at-a-time) simulation and large-scale simulation (5000 samples) are available to the student.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;types-of-error&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Types of Error&lt;/h3&gt;
&lt;p&gt;Simulation is also helpful in coming to understand such notions as the level of significance of a hypothesis test (i.e., the probability a true Null Hypothesis in repeated sampling), and the notion of power as well. See the following app:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;runApp(system.file(&amp;quot;Type12Errors&amp;quot;,package=&amp;quot;tigerstats&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;illustrating-fine-points&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Illustrating Fine Points&lt;/h3&gt;
&lt;p&gt;Sometimes you want to have an app on hand, not because it addresses a major course objective, but simply in case students ask a particular question. For example, sometimes when the class is looking at a scatter plot—with regression line—of data that comes from a bivariate normal distribution, a student will remark that the regression line looks “too shallow”. This root of this question is a confusion, in the student’s mind, between two purposes that a line might serve:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;to provide a “linear summary”&amp;quot; of the scatter plot;&lt;/li&gt;
&lt;li&gt;to provide linear predictions, based on the scatter plot, of y-values from x-values.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The so-called “SD line”—the line that runs through the point of averages and whose slope is the ratio of the standard deviation of the &lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt;-value to the standard deviation of the &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;-value—is well-suited to the former task, whereas the regression line is, of course, the right choice for the latter one. When many students first look at a scatter plot, they see an SD line in their mind’s eye; when they get around to producing the regression line, it can look like a misfire.&lt;/p&gt;
&lt;p&gt;The following app helps clear things up for students. It is based on a discussion on the “shallow regression line” issue in &lt;a href=&#34;http://books.wwnorton.com/books/Statistics/&#34;&gt;&lt;em&gt;Statistics&lt;/em&gt;&lt;/a&gt;, the classic text by Freeman, Pisani and Purves.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;runApp(system.file(&amp;quot;ShallowReg&amp;quot;,package=&amp;quot;tigerstats&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;playing-games&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Playing Games&lt;/h3&gt;
&lt;p&gt;Here’s is yet another of those “find the regression line” apps that you see all over the web:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;runApp(system.file(&amp;quot;FindRegLine&amp;quot;,package=&amp;quot;tigerstats&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You have the option to keep score. Your score is the sum of the number of times you have submitted a guess and the following “closeness measure”:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[100 \times \frac{\textbf{Your Line&amp;#39;s Error-SS}-\textbf{Residual-SS}}{\textbf{Total-SS}-\textbf{Residual-SS}}.\]&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;shiny-vs.-manipulate&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Shiny vs. &lt;code&gt;manipulate&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;You don’t need to know much at all about web development in order to program in Shiny, but for R users there is the extra requirement of becoming comfortable with the reactive programming paradigm. The hurdle is not all that high: as an intermediate-level R-programmer, I was able to pick up Shiny over a weekend. The &lt;a href=&#34;http://shiny.rstudio.com/tutorial/&#34;&gt;online Shiny tutorials&lt;/a&gt; and a few consultations with &lt;a href=&#34;http://stackoverflow.com/&#34;&gt;Stack Overflow&lt;/a&gt; provide almost everything I needed to know.&lt;/p&gt;
&lt;p&gt;The pay-back for the extra learning is considerable. Shiny apps permit a much more flexible user-interface, as compared to &lt;code&gt;manipulate&lt;/code&gt;. For example, it is easy to make input “dynamic”, in the sense that the requests that a user can make of the app can be easily made to depend upon previous choices that the user has made. It’s also easy to provide plenty of written explanation for the activity, as it proceeds: with &lt;code&gt;manipulate&lt;/code&gt; apps this can be somewhat difficult.&lt;/p&gt;
&lt;p&gt;On the other hand, since &lt;code&gt;manipulate&lt;/code&gt; apps run directly within RStudio, they can easily be programmed to work with any data frame that the user specifies. Shiny apps will allow you to upload a CSV file, but for elementary students this process is usually too much of a burden.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;instructional-apps-gallery&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Instructional Apps Gallery?&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://www.showmeshiny.com/&#34;&gt;Show Me Shiny&lt;/a&gt; has some wonderful instructional apps.&lt;/p&gt;
&lt;p&gt;Considering all of the buzz surrounding Shiny, I am baffled at how difficult it is has been for me to find other up-to-date sites featuring Shiny apps for statistics instruction. Perhaps readers of this post could direct me to any that they know of. Eventually it would be nice to develop something like a ShinyTeachingTube, which could serve as a central hub for Shiny instructional applets.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Five Reasons to Teach Elementary Statistics With R:  #2</title>
      <link>/post/2014-04-08-reasons-to-teach-with-r-2/</link>
      <pubDate>Tue, 08 Apr 2014 23:59:59 +0000</pubDate>
      
      <guid>/post/2014-04-08-reasons-to-teach-with-r-2/</guid>
      <description>&lt;div id=&#34;introduction&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;This is is second in a projected five-part series of posts aimed at colleagues who teach elementary statistics. If you teach with R but hesitate to spring such a powerful and complex tool on unsuspecting introductory students—many of whom whom will have had no prior experience with the command line, much less with coding—then I hope these posts will give you some encouragement.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;http://statistics.rainandrhino.org/blog/2014/04/05/tigerstatsintro/&#34;&gt;first post&lt;/a&gt; in this series introduced package &lt;code&gt;mosaic&lt;/code&gt;, and promised to review a supplementary package that I and a colleague put together for our own students, but I’ve decided put that off a bit and focus instead on another powerful new tool for statistics instruction: the well-known &lt;a href=&#34;https://www.rstudio.com/&#34;&gt;RStudio&lt;/a&gt; Integrated Development Environment for R, and its &lt;code&gt;manipulate&lt;/code&gt; package in particular.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;reason-2-rstudios-manipulate&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Reason #2: RStudio’s &lt;code&gt;manipulate&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;You might think that an IDE is strictly for programmers. The authors of &lt;code&gt;mosaic&lt;/code&gt;, though, looked at RStudio and saw an environment ripe for customization to fit the elementary classroom. RStudio offers many benefits in this regard, but for this post I’ll concentrate on just one: its pre-installed package &lt;code&gt;manipulate&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The RStudio developers may have written &lt;code&gt;manipulate&lt;/code&gt; simply as a prototype for &lt;a href=&#34;http://shiny.rstudio.com/&#34;&gt;Shiny&lt;/a&gt;, but it happens to be a fabulous tool for authoring instructional applets. To be sure, there are many great instructional apps out on the web—visual stunners put together by authentic web developers—but the everyday statistics instructor may find that &lt;code&gt;manipulate&lt;/code&gt; empowers her to quickly work up small instructional apps that address needs specific to her own students.&lt;/p&gt;
&lt;p&gt;At my College, for example, we believe that simulation is important to understanding probability concepts, but we also find that our students don’t easily grasp the import of a simulation when the computers simply generates, say, 3000 re-samples and summarizes the results, &lt;em&gt;all in flash&lt;/em&gt;. We feel the need for plenty of “one at a time” simulation experiences that serve as transitions to the analysis of large-scale simulation results, and we don’t always find apps on the web that cater to our needs in just the way we would like.&lt;/p&gt;
&lt;p&gt;Suppose you want students to understand coverage properties of confidence intervals—i.e., what we really mean when we say that we are “95%-confident” that the interval covers the population parameter–in a ground-up way. Then you might do as my colleague Rebekah Robinson did, and write a manipulate app like &lt;code&gt;CIMean()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To get the app, install package &lt;code&gt;tigerstats&lt;/code&gt; from CRAN, or for the very latest version try:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;require(devtools)
install_github(repo=&amp;quot;homerhanumat/tigerstats&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, get into RStudio (if you are not there already), and run:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;require(tigerstats)
require(manipulate)
CIMean(~height,data=imagpop)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The app loads in the (roughly normally distributed) heights of an imaginary population of 10,000 people. Sliders allow the user to select a sample size and a desired confidence level. Click on one of the sliders and you’ll get just one sample from the population, with a histogram of the sample overlaying the density curve for the population, and a confidence interval displayed clearly along the horizontal axis. The user can easily see whether the interval contains the population mean (marked by the red vertical line). Output to the console also keeps the user apprised of what has just happened. When the user has clicked enough to get the idea, he/she can ask for a lot of samples at once, verifying that when assumptions are met 95%-confidence intervals do indeed cover their target parameter about 95% of the time.&lt;/p&gt;
&lt;p&gt;One advantage of &lt;code&gt;manipulate&lt;/code&gt; apps over the visually spectacular ones you find on the web is that you can easily write them to accept arbitrary input. &lt;code&gt;CIMean()&lt;/code&gt;, for example, will deal with any numerical variable from any data frame on R’s search path,including the quite right-skewed variable &lt;strong&gt;income&lt;/strong&gt; from&lt;code&gt;imagpop&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;CIMean(~income,data=imagpop)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The user realizes quickly that the standard t-intervals applied to small samples from skewed populations do not possess the advertised coverage properties.&lt;/p&gt;
&lt;p&gt;Once you get into the spirit of &lt;code&gt;manipulate&lt;/code&gt; you may find yourself writing apps that work in a similar vein without requiring the elements of the package itself. For example &lt;code&gt;ChisqSimSlow()&lt;/code&gt;, which does not require &lt;code&gt;manipulate&lt;/code&gt; (and in fact runs outside of RStudio) takes arbitrary data and applies a one-at-a-time re-sampling routine to slowly build up the Null Distribution of the chi-square statistic, in a situation where one is testing whether two factor variables are associated.&lt;/p&gt;
&lt;p&gt;For example, suppose we are looking at survey in which a random sample of students were asked for their sex and for their seating preference in a classroom:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;SexSeat &amp;lt;- xtabs(~sex+seat,data=m111survey)
SexSeat&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##         seat
## sex      1_front 2_middle 3_back
##   female      19       16      5
##   male         8       16      7&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s check this out with some row percentages:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;rowPerc(SexSeat)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##         seat
## sex      1_front 2_middle 3_back  Total
##   female   47.50    40.00  12.50 100.00
##   male     25.81    51.61  22.58 100.00&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Hmm, the women in the sample seem much more likely than the guys to prefer the Front! Does this data provide convincing evidence for a relationship between &lt;strong&gt;sex&lt;/strong&gt; and &lt;strong&gt;seat&lt;/strong&gt; in the College population at large? To investigate this, a student might try:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ChisqSimSlow(~sex+seat,data=m111survey)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Keep asking for a re-sample, and after a while you get the sense that the observed value of the chi-square statistic is not an unusually large value, if &lt;strong&gt;sex&lt;/strong&gt; and &lt;strong&gt;seat&lt;/strong&gt; are, all along, unrelated in the population.&lt;/p&gt;
&lt;p&gt;Once students understand the import of simulation they can employ it to advantage on a large scale. In the &lt;code&gt;tigerstats&lt;/code&gt; version of the &lt;code&gt;chisq.test()&lt;/code&gt;, the student might ask for:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;set.seed(2014)
chisqtestGC(~sex+seat,data=m111survey,
      simulate.p.value=&amp;quot;random&amp;quot;,
      B=3000,
      graph=TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Pearson&amp;#39;s chi-squared test with simulated p-value, marginal sums not fixed
##   (based on 3000 resamples) 
## 
## Observed Counts:
##         seat
## sex      1_front 2_middle 3_back
##   female      19       16      5
##   male         8       16      7
## 
## Counts Expected by Null:
##         seat
## sex      1_front 2_middle 3_back
##   female   15.21    18.03   6.76
##   male     11.79    13.97   5.24
## 
## Contributions to the chi-square statistic:
##         seat
## sex      1_front 2_middle 3_back
##   female    0.94     0.23   0.46
##   male      1.22     0.29   0.59
## 
## 
## Chi-Square Statistic = 3.734 
## Degrees of Freedom of the table = 2 
## P-Value = 0.1729&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2014-04-08-reasons-to-teach-with-R-2_files/figure-html/reasonsteachr2-1.png&#34; width=&#34;432&#34; /&gt;&lt;/p&gt;
&lt;div id=&#34;do-it-yourself&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Do It Yourself&lt;/h3&gt;
&lt;p&gt;I do not discuss the above apps with the expectation that colleagues at other institution will adopt them. On the contrary, my point is merely that the folks at RStudio have provided R-users with a tool that enables ordinary instructors like us to write our own apps. If you like a particular app, them check out the source code (&lt;code&gt;tigerstats&lt;/code&gt;, for example is &lt;a href=&#34;http:github.com/homerhanumat/tigerstats&#34;&gt;on GitHub&lt;/a&gt;), clean it up a bit maybe, and use it as a basis for an app tailored to your particular tastes and the needs of your particular students.&lt;/p&gt;
&lt;p&gt;Better yet, persuade an upper-level student to write the app for you as a programming project: &lt;code&gt;manipulate&lt;/code&gt;’s greatest use may prove to be as a gateway-drug to coding!&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;next-time&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Next Time&lt;/h3&gt;
&lt;p&gt;In the next post, maybe we’ll have a look at what R Studio’s &lt;code&gt;shiny&lt;/code&gt; can do for an elementary class.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Five Reasons to Teach Elementary Statistics With R:  #1</title>
      <link>/post/2014-04-01-tigerstatsintro/</link>
      <pubDate>Tue, 01 Apr 2014 01:00:00 +0000</pubDate>
      
      <guid>/post/2014-04-01-tigerstatsintro/</guid>
      <description>&lt;div id=&#34;introduction&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;This is is first in a projected five-part series of posts aimed at colleagues who teach elementary statistics.&lt;/p&gt;
&lt;p&gt;I can’t remember exactly how I first made acquaintance with R, but it’s been an important part of my teaching/consulting life since at least 2007, when I used it for the first time in an upper-level undergraduate statistics class. As of last Fall all of our statistics classes—even the elementary ones—are based on R. We may never return to a ground-up GUI platform. If you teach with R but hesitate to spring such a powerful and complex tool on unsuspecting introductory students—many of whom whom will have had no prior experience with the command line, much less with coding—then I hope these posts will give you some encouragement.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;reason-1-package-mosaic&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Reason #1: Package &lt;code&gt;mosaic&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;This package is a product of the NSF-funded &lt;a href=&#34;http://mosaic-web.org/&#34;&gt;Project Mosaic&lt;/a&gt;, led by Nick Horton, Daniel Kaplan and Randall Pruim. It’s on CRAN, but you might want to keep up with the very latest releases on Github:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;require(devtools)
install_github(repo=&amp;quot;rpruim/mosaic&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;mosaic&lt;/code&gt; aims to flatten the learning curve for elementary students by gentling down the coding aspects of the R experience. With &lt;code&gt;mosaic&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;students need to know relatively few R-functions in order to thrive in the introductory course;&lt;/li&gt;
&lt;li&gt;many of the these functions are “wrappers” for standard R-functions, and provide a fairly uniform interface for user input;&lt;/li&gt;
&lt;li&gt;the package provides tools that mostly obviate the need for students to deal with R as a programming language:
&lt;ul&gt;
&lt;li&gt;the students don’t have to write their own functions;&lt;/li&gt;
&lt;li&gt;they don’t need to think much about the different types of R objects;&lt;/li&gt;
&lt;li&gt;they don’t even need to learn about flow-control structures.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;keeping-simple-things-simple&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Keeping Simple Things Simple&lt;/h3&gt;
&lt;p&gt;R can make the easy stuff surprisingly tricky for beginners: suppose for example, that you want numerical summaries of a particular numerical variable, broken down by the values of some factor variable. Standard procedure in R would be to write your own anonymous function as an argument for &lt;code&gt;aggregate()&lt;/code&gt;, thus:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;aggregate(mpg~cyl,data=mtcars,
    FUN=function(x) c(mean=mean(x),sd=sd(x)))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   cyl  mpg.mean    mpg.sd
## 1   4 26.663636  4.509828
## 2   6 19.742857  1.453567
## 3   8 15.100000  2.560048&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;mosaic&lt;/code&gt; skirts the problem by providing wrapper functions for aggregation:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;require(mosaic)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mean(mpg~cyl,data=mtcars)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##        4        6        8 
## 26.66364 19.74286 15.10000&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sd(mpg~cyl,data=mtcars)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##        4        6        8 
## 4.509828 1.453567 2.560048&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;One can attain even more simplicity, at only a small cost in flexibility, by sticking to &lt;code&gt;mosaic&lt;/code&gt;’s &lt;code&gt;favstats()&lt;/code&gt; as a one-stop shop:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;favstats(mpg~cyl,data= mtcars)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   cyl  min    Q1 median    Q3  max     mean       sd  n missing
## 1   4 21.4 22.80   26.0 30.40 33.9 26.66364 4.509828 11       0
## 2   6 17.8 18.65   19.7 21.00 21.4 19.74286 1.453567  7       0
## 3   8 10.4 14.40   15.2 16.25 19.2 15.10000 2.560048 14       0&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;flow-control-for-the-masses&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Flow-Control for the Masses&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;mosaic&lt;/code&gt; includes powerful wrapper functions that permit extensive work with re-sampling and simulation, without the need to learn flow-control. Here follows a &lt;code&gt;mosaic&lt;/code&gt;-style implementation of a permutation test.&lt;/p&gt;
&lt;p&gt;Consider the data frame &lt;code&gt;Pseudoscorpions&lt;/code&gt; from the &lt;code&gt;abd&lt;/code&gt; package:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;require(abd)
data(Pseudoscorpions)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Pseudoscorpions&lt;/code&gt; contains the results of an experiment on 36 female Pseudoscorpions: each one was either mated twice with a single male (&lt;code&gt;SM&lt;/code&gt;) or was mated with two males, one time each (&lt;code&gt;DM&lt;/code&gt;), receiving about the same total amount of sperm under either treatment. The idea was to see whether an increase in genetic diversity of sperm sources increases the number of successful broods a female produces during her lifetime.&lt;/p&gt;
&lt;p&gt;Here are some descriptive results:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;favstats(successful.broods~treatment,
    data=Pseudoscorpions)[c(&amp;quot;treatment&amp;quot;,&amp;quot;mean&amp;quot;,&amp;quot;sd&amp;quot;)]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   treatment  mean       sd
## 1        DM 3.625 1.962142
## 2        SM 2.200 1.609184&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For the permutation test, we first compute and store the observed difference between the sample means:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;obsDiff &amp;lt;- diffmean(successful.broods~treatment,
    data=Pseudoscorpions)
obsDiff&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## diffmean 
##   -1.425&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, we create an empirical Null distribution with &lt;code&gt;shuffle()&lt;/code&gt; (the random permutation function) and &lt;code&gt;do()&lt;/code&gt; (a for-loop wrapper):&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;set.seed(12345)
nullDist &amp;lt;- do(2500)*(
  diffmean(successful.broods~shuffle(treatment),
      data=Pseudoscorpions))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, we call &lt;code&gt;statTally()&lt;/code&gt; for numerical and graphical analysis of the results:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;statTally(obsDiff,nullDist)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Null distribution appears to be asymmetric. (p = 0.000258)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Test statistic applied to sample data =  -1.425&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Quantiles of test statistic applied to random data:&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    50%    90%    95%    99% 
## 0.0375 0.8250 0.9375 1.3875&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Of the 2501 samples (1 original + 2500 random),&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
##  12 ( 0.48 % ) had test stats = -1.425&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
##  40 ( 1.6 % ) had test stats &amp;lt;= -1.425&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2014-04-01-tigerstatsintro_files/figure-html/reason1hist-1.png&#34; width=&#34;432&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We seem to have fairly strong evidence (&lt;span class=&#34;math inline&#34;&gt;\(P \approx 1.7\%\)&lt;/span&gt;) that mating with more males increases the number of successful broods.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;there-is-much-more&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;There is Much More&lt;/h3&gt;
&lt;p&gt;I have only scratched the surface of the &lt;code&gt;mosaic&lt;/code&gt; package, which is rich enough to support statistics instruction in both elementary and advanced courses. The &lt;code&gt;mosaic&lt;/code&gt; authors provide extensive instructor resources in the package vignettes, and frequently offer workshops and short-courses, especially through events sponsored by the &lt;a href=&#34;https://www.causeweb.org/&#34;&gt;Consortium for the Advancement of Undergraduate Statistics Education&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Next week I’ll introduce a supplementary package that is intended for students who might require even more simplicity, and that aligns their R experience with a particular set of teaching objectives.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;references&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;p&gt;The Pseudoscorpion experiment is discussed in Whitlock and Schluter’s &lt;em&gt;The Analysis of Biological Data&lt;/em&gt; (Roberts and Company Publishers; First Edition, 1st Edition July 2008).&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
